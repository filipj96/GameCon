// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DatingSiteContext))]
    partial class DatingSiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DataLayer.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Noobs"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Pros"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Omegaluls"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("FriendId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            FriendId = 1,
                            CategoryId = 1,
                            ReceiverId = 2,
                            SenderId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            FriendId = 2,
                            CategoryId = 2,
                            ReceiverId = 3,
                            SenderId = 2,
                            StatusId = 2
                        },
                        new
                        {
                            FriendId = 3,
                            CategoryId = 1,
                            ReceiverId = 1,
                            SenderId = 3,
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Name = "Dota 2",
                            Publisher = "Valve"
                        },
                        new
                        {
                            GameId = 2,
                            Name = "CSGO",
                            Publisher = "Valve"
                        },
                        new
                        {
                            GameId = 3,
                            Name = "PUBG",
                            Publisher = "Bluehole Corporation"
                        },
                        new
                        {
                            GameId = 4,
                            Name = "World of Warcraft",
                            Publisher = "Blizzard"
                        },
                        new
                        {
                            GameId = 5,
                            Name = "Among us",
                            Publisher = "InnerSloth"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "MOBA"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "FPS"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Explore"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "King of the hill"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "MMO"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Strategy"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Open world"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Hello muthafucka",
                            IsRead = false,
                            ReceiverId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 612, DateTimeKind.Local).AddTicks(5647)
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Check this shit out",
                            IsRead = false,
                            ReceiverId = 3,
                            SenderId = 1,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 614, DateTimeKind.Local).AddTicks(2696)
                        },
                        new
                        {
                            MessageId = 3,
                            Content = "SKKRTSKRRRT",
                            IsRead = false,
                            ReceiverId = 2,
                            SenderId = 1,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 614, DateTimeKind.Local).AddTicks(2721)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            Name = "Sweden"
                        },
                        new
                        {
                            NationalityId = 2,
                            Name = "Norway"
                        },
                        new
                        {
                            NationalityId = 3,
                            Name = "Denmark"
                        },
                        new
                        {
                            NationalityId = 4,
                            Name = "Germany"
                        },
                        new
                        {
                            NationalityId = 5,
                            Name = "Great Britain"
                        },
                        new
                        {
                            NationalityId = 6,
                            Name = "Spain"
                        },
                        new
                        {
                            NationalityId = 7,
                            Name = "France"
                        },
                        new
                        {
                            NationalityId = 8,
                            Name = "USA"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Personality", b =>
                {
                    b.Property<int>("PersonalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonalityId");

                    b.ToTable("Personalities");

                    b.HasData(
                        new
                        {
                            PersonalityId = 1,
                            Description = "Cute"
                        },
                        new
                        {
                            PersonalityId = 2,
                            Description = "Narcissistic"
                        },
                        new
                        {
                            PersonalityId = 3,
                            Description = "Manipulative"
                        },
                        new
                        {
                            PersonalityId = 4,
                            Description = "Shy"
                        },
                        new
                        {
                            PersonalityId = 5,
                            Description = "Leader"
                        },
                        new
                        {
                            PersonalityId = 6,
                            Description = "Strategist"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            Name = "XBOX"
                        },
                        new
                        {
                            PlatformId = 2,
                            Name = "PS"
                        },
                        new
                        {
                            PlatformId = 3,
                            Name = "PC"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Content = "Holy shit dude.",
                            ReceiverId = 1,
                            SenderId = 2,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 614, DateTimeKind.Local).AddTicks(9527)
                        },
                        new
                        {
                            PostId = 2,
                            Content = "Holy shit dude.",
                            ReceiverId = 2,
                            SenderId = 3,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 614, DateTimeKind.Local).AddTicks(9843)
                        },
                        new
                        {
                            PostId = 3,
                            Content = "Holy shit dude.",
                            ReceiverId = 3,
                            SenderId = 1,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 614, DateTimeKind.Local).AddTicks(9853)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Accepted"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "Blocked"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<int>("PersonalityId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Active = true,
                            Age = 28,
                            FirstName = "Simon",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Bernsdorff Wallstedt",
                            Mail = "simon.bernsdorff-wallstedt@dating.com",
                            NationalityId = 1,
                            NickName = "Pandrum",
                            Online = false,
                            PersonalityId = 1
                        },
                        new
                        {
                            UserId = 2,
                            Active = true,
                            Age = 27,
                            FirstName = "Lukas",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Brolin",
                            Mail = "lukas.brolin@dating.com",
                            NationalityId = 1,
                            NickName = "brollestar",
                            Online = false,
                            PersonalityId = 2
                        },
                        new
                        {
                            UserId = 3,
                            Active = true,
                            Age = 27,
                            FirstName = "Filip",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Johansson",
                            Mail = "filip.johansson@dating.com",
                            NationalityId = 1,
                            NickName = "paraplydricka",
                            Online = false,
                            PersonalityId = 3
                        },
                        new
                        {
                            UserId = 4,
                            Active = true,
                            Age = 34,
                            FirstName = "Magnus",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Fredriksson",
                            Mail = "magnus.fredriksson@dating.com",
                            NationalityId = 1,
                            NickName = "magge",
                            Online = false,
                            PersonalityId = 4
                        },
                        new
                        {
                            UserId = 5,
                            Active = true,
                            Age = 22,
                            FirstName = "Didrik",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Hjelm",
                            Mail = "didrik.hjelm@dating.com",
                            NationalityId = 2,
                            NickName = "didhje",
                            Online = false,
                            PersonalityId = 2
                        },
                        new
                        {
                            UserId = 6,
                            Active = true,
                            Age = 25,
                            FirstName = "Selma",
                            Gender = "Female",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Nordheim",
                            Mail = "selma.nordheim@dating.com",
                            NationalityId = 2,
                            NickName = "Selma",
                            Online = false,
                            PersonalityId = 5
                        },
                        new
                        {
                            UserId = 7,
                            Active = true,
                            Age = 27,
                            FirstName = "Kassandra",
                            Gender = "Female",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Lökholm",
                            Mail = "kassandra.Lökholm@dating.com",
                            NationalityId = 1,
                            NickName = "Kassi",
                            Online = false,
                            PersonalityId = 1
                        },
                        new
                        {
                            UserId = 8,
                            Active = true,
                            Age = 31,
                            FirstName = "Kent",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Andersson",
                            Mail = "kent.andersson@dating.com",
                            NationalityId = 1,
                            NickName = "Kentaflenta",
                            Online = false,
                            PersonalityId = 5
                        },
                        new
                        {
                            UserId = 9,
                            Active = true,
                            Age = 41,
                            FirstName = "Sebastian",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Vettel",
                            Mail = "sebastian.vettel@dating.com",
                            NationalityId = 4,
                            NickName = "Vettelmano",
                            Online = false,
                            PersonalityId = 3
                        },
                        new
                        {
                            UserId = 10,
                            Active = true,
                            Age = 38,
                            FirstName = "Nico",
                            Gender = "Male",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Rosberg",
                            Mail = "nico.rosberg@dating.com",
                            NationalityId = 4,
                            NickName = "Spyking",
                            Online = false,
                            PersonalityId = 3
                        },
                        new
                        {
                            UserId = 11,
                            Active = true,
                            Age = 30,
                            FirstName = "Emma",
                            Gender = "Female",
                            ImgUrl = "Images/User/User.jpg",
                            LastName = "Watson",
                            Mail = "emma.watson@dating.com",
                            NationalityId = 5,
                            NickName = "Hermione",
                            Online = false,
                            PersonalityId = 4
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            ReceiverId = 1,
                            SenderId = 1,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 615, DateTimeKind.Local).AddTicks(1794)
                        },
                        new
                        {
                            VisitId = 2,
                            ReceiverId = 2,
                            SenderId = 3,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 615, DateTimeKind.Local).AddTicks(2346)
                        },
                        new
                        {
                            VisitId = 3,
                            ReceiverId = 3,
                            SenderId = 2,
                            TimeStamp = new DateTime(2021, 1, 2, 20, 6, 2, 615, DateTimeKind.Local).AddTicks(2354)
                        });
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("GameGenre");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            GenresGenreId = 1
                        },
                        new
                        {
                            GamesGameId = 1,
                            GenresGenreId = 6
                        },
                        new
                        {
                            GamesGameId = 2,
                            GenresGenreId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            GenresGenreId = 6
                        },
                        new
                        {
                            GamesGameId = 3,
                            GenresGenreId = 2
                        },
                        new
                        {
                            GamesGameId = 3,
                            GenresGenreId = 4
                        },
                        new
                        {
                            GamesGameId = 3,
                            GenresGenreId = 6
                        },
                        new
                        {
                            GamesGameId = 3,
                            GenresGenreId = 7
                        },
                        new
                        {
                            GamesGameId = 4,
                            GenresGenreId = 3
                        },
                        new
                        {
                            GamesGameId = 4,
                            GenresGenreId = 5
                        },
                        new
                        {
                            GamesGameId = 4,
                            GenresGenreId = 7
                        },
                        new
                        {
                            GamesGameId = 5,
                            GenresGenreId = 6
                        });
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsPlatformId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "PlatformsPlatformId");

                    b.HasIndex("PlatformsPlatformId");

                    b.ToTable("GamePlatform");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            PlatformsPlatformId = 3
                        },
                        new
                        {
                            GamesGameId = 2,
                            PlatformsPlatformId = 1
                        },
                        new
                        {
                            GamesGameId = 2,
                            PlatformsPlatformId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            PlatformsPlatformId = 3
                        },
                        new
                        {
                            GamesGameId = 3,
                            PlatformsPlatformId = 3
                        },
                        new
                        {
                            GamesGameId = 4,
                            PlatformsPlatformId = 3
                        },
                        new
                        {
                            GamesGameId = 5,
                            PlatformsPlatformId = 3
                        });
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("GameUser");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 3
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 1
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 1
                        },
                        new
                        {
                            GamesGameId = 3,
                            UsersUserId = 1
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 2
                        },
                        new
                        {
                            GamesGameId = 3,
                            UsersUserId = 2
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 2
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 3
                        },
                        new
                        {
                            GamesGameId = 3,
                            UsersUserId = 3
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 4
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 4
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 4
                        },
                        new
                        {
                            GamesGameId = 5,
                            UsersUserId = 4
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 5
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 5
                        },
                        new
                        {
                            GamesGameId = 5,
                            UsersUserId = 5
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 6
                        },
                        new
                        {
                            GamesGameId = 3,
                            UsersUserId = 6
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 6
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 7
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 8
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 8
                        },
                        new
                        {
                            GamesGameId = 5,
                            UsersUserId = 8
                        },
                        new
                        {
                            GamesGameId = 1,
                            UsersUserId = 9
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 10
                        },
                        new
                        {
                            GamesGameId = 2,
                            UsersUserId = 11
                        },
                        new
                        {
                            GamesGameId = 4,
                            UsersUserId = 11
                        });
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("GenresGenreId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("GenreUser");

                    b.HasData(
                        new
                        {
                            GenresGenreId = 1,
                            UsersUserId = 1
                        },
                        new
                        {
                            GenresGenreId = 2,
                            UsersUserId = 1
                        },
                        new
                        {
                            GenresGenreId = 3,
                            UsersUserId = 1
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 2
                        },
                        new
                        {
                            GenresGenreId = 1,
                            UsersUserId = 2
                        },
                        new
                        {
                            GenresGenreId = 2,
                            UsersUserId = 2
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 3
                        },
                        new
                        {
                            GenresGenreId = 5,
                            UsersUserId = 3
                        },
                        new
                        {
                            GenresGenreId = 6,
                            UsersUserId = 3
                        },
                        new
                        {
                            GenresGenreId = 1,
                            UsersUserId = 4
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 4
                        },
                        new
                        {
                            GenresGenreId = 7,
                            UsersUserId = 4
                        },
                        new
                        {
                            GenresGenreId = 1,
                            UsersUserId = 5
                        },
                        new
                        {
                            GenresGenreId = 2,
                            UsersUserId = 5
                        },
                        new
                        {
                            GenresGenreId = 3,
                            UsersUserId = 5
                        },
                        new
                        {
                            GenresGenreId = 1,
                            UsersUserId = 6
                        },
                        new
                        {
                            GenresGenreId = 2,
                            UsersUserId = 6
                        },
                        new
                        {
                            GenresGenreId = 6,
                            UsersUserId = 6
                        },
                        new
                        {
                            GenresGenreId = 2,
                            UsersUserId = 7
                        },
                        new
                        {
                            GenresGenreId = 3,
                            UsersUserId = 8
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 9
                        },
                        new
                        {
                            GenresGenreId = 3,
                            UsersUserId = 10
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 10
                        },
                        new
                        {
                            GenresGenreId = 4,
                            UsersUserId = 11
                        },
                        new
                        {
                            GenresGenreId = 5,
                            UsersUserId = 11
                        },
                        new
                        {
                            GenresGenreId = 7,
                            UsersUserId = 11
                        });
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.Property<int>("PlatformsPlatformId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("PlatformsPlatformId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("PlatformUser");

                    b.HasData(
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 1
                        },
                        new
                        {
                            PlatformsPlatformId = 2,
                            UsersUserId = 1
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 2
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 3
                        },
                        new
                        {
                            PlatformsPlatformId = 1,
                            UsersUserId = 3
                        },
                        new
                        {
                            PlatformsPlatformId = 1,
                            UsersUserId = 4
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 4
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 5
                        },
                        new
                        {
                            PlatformsPlatformId = 1,
                            UsersUserId = 5
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 6
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 7
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 8
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 9
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 10
                        },
                        new
                        {
                            PlatformsPlatformId = 2,
                            UsersUserId = 10
                        },
                        new
                        {
                            PlatformsPlatformId = 3,
                            UsersUserId = 11
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Friend", b =>
                {
                    b.HasOne("DataLayer.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Receiver")
                        .WithMany("Friends")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany("Users")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataLayer.Models.Message", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Receiver")
                        .WithMany("PostsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany("PostsSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Personality", "Personality")
                        .WithMany()
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("DataLayer.Models.Visit", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Receiver")
                        .WithMany("Visitors")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany("MyVisits")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.HasOne("DataLayer.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.HasOne("DataLayer.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("MyVisits");

                    b.Navigation("PostsReceived");

                    b.Navigation("PostsSent");

                    b.Navigation("Users");

                    b.Navigation("Visitors");
                });
#pragma warning restore 612, 618
        }
    }
}
