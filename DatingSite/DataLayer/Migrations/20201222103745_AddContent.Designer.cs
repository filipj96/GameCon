// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DatingSiteContext))]
    [Migration("20201222103745_AddContent")]
    partial class AddContent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DataLayer.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Noobs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pros"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Omegaluls"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dota 2",
                            Publisher = "Valve"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CS:GO",
                            Publisher = "Valve"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PUBG",
                            Publisher = "Bluehole Corporation"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MOBA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FPS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FPS"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RecieverId = 1,
                            SenderId = 2,
                            Text = "Hello muthafucka",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 926, DateTimeKind.Local).AddTicks(1662)
                        },
                        new
                        {
                            Id = 2,
                            RecieverId = 3,
                            SenderId = 1,
                            Text = "Check this shit out",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 930, DateTimeKind.Local).AddTicks(2759)
                        },
                        new
                        {
                            Id = 3,
                            RecieverId = 2,
                            SenderId = 1,
                            Text = "SKKRTSKRRRT",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 930, DateTimeKind.Local).AddTicks(2797)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Norwegian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "South African"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Personality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cute"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Narcissistic"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Manipulative"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XBOX"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PS1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PS3"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RecieverId = 1,
                            SenderId = 2,
                            Text = "Holy shit dude.",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(508)
                        },
                        new
                        {
                            Id = 2,
                            RecieverId = 2,
                            SenderId = 3,
                            Text = "Holy shit dude.",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(1471)
                        },
                        new
                        {
                            Id = 3,
                            RecieverId = 3,
                            SenderId = 1,
                            Text = "Holy shit dude.",
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(1507)
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blocked"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonalityId")
                        .HasColumnType("int");

                    b.Property<string>("PreferedLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Age = 28,
                            FirstName = "Simon",
                            Gender = "Male",
                            LastName = "Bernsdorff Wallstedt",
                            Mail = "simon.bernsdorff-wallstedt@dating.com",
                            Online = false,
                            PreferedLanguage = "Swedish"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Age = 27,
                            FirstName = "Lukas",
                            Gender = "Male",
                            LastName = "Brolin",
                            Mail = "lukas.broling@dating.com",
                            Online = false,
                            PreferedLanguage = "Swedish"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Age = 27,
                            FirstName = "Filip",
                            Gender = "Male",
                            LastName = "Johansson",
                            Mail = "filip.johansson@dating.com",
                            Online = false,
                            PreferedLanguage = "Swedish"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Visit", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Visitor")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("UserID", "Visitor");

                    b.HasIndex("Visitor");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Visitor = 1,
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(5669)
                        },
                        new
                        {
                            UserID = 2,
                            Visitor = 3,
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(6553)
                        },
                        new
                        {
                            UserID = 3,
                            Visitor = 2,
                            TimeStamp = new DateTime(2020, 12, 22, 11, 37, 44, 932, DateTimeKind.Local).AddTicks(6565)
                        });
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformsId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "PlatformsId");

                    b.HasIndex("PlatformsId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GenreUser");
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.Property<int>("PlatformsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("PlatformsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PlatformUser");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FriendsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("FriendsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("DataLayer.Models.Message", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataLayer.Models.Post", b =>
                {
                    b.HasOne("DataLayer.Models.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("DataLayer.Models.Personality", "Personality")
                        .WithMany()
                        .HasForeignKey("PersonalityId");

                    b.Navigation("Nationality");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("DataLayer.Models.Visit", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User1")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", "User2")
                        .WithMany()
                        .HasForeignKey("Visitor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamePlatform", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("DataLayer.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.HasOne("DataLayer.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformUser", b =>
                {
                    b.HasOne("DataLayer.Models.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
